'use client';

import { useState, useEffect } from 'react';
import { useSearchParams, useRouter } from 'next/navigation';
import { Suspense } from 'react';

function SmartAssignContent() {
  const searchParams = useSearchParams();
  const router = useRouter();
  const [assignmentType, setAssignmentType] = useState<'annotator' | 'qa'>('annotator');
  const [selectedAssignee, setSelectedAssignee] = useState<any>(null);
  const [isAssigning, setIsAssigning] = useState(false);
  const [autoGenerateDraftOnAssign, setAutoGenerateDraftOnAssign] = useState(true);
  const [selectedTasks, setSelectedTasks] = useState<number[]>([]);
  const [tasks, setTasks] = useState<any[]>([]);

  // 从URL参数获取选中的任务ID
  useEffect(() => {
    const taskIds = searchParams.get('tasks');
    if (taskIds) {
      setSelectedTasks(taskIds.split(',').map(id => parseInt(id)));
    }
  }, [searchParams]);

  // 模拟任务数据（实际应该从API获取）
  useEffect(() => {
    setTasks([
      {
        id: 1,
        tableId: 'T001',
        fileName: 'Financial_Report_Q4_2024.pdf',
        pageNumber: 5,
        tableBbox: [100, 200, 400, 350],
        tableRows: 8,
        tableCols: 4,
        organization: 'TechCorp Inc.',
        project: 'Financial Analysis Q4 2024',
        projectId: 1,
        complexity: 'medium',
        priority: 'high',
        status: 'pending',
        assignedTo: null,
        createdAt: '2024-01-22',
        dueDate: '2024-01-25',
        requiredSkills: ['Finance', 'Reports'],
        aiDraftStatus: 'not_generated',
        aiDraftGenerationLog: [],
        hasFootnotes: true,
        pdfGroup: 'Financial_Report_Q4_2024.pdf'
      },
      {
        id: 2,
        tableId: 'T002',
        fileName: 'Financial_Report_Q4_2024.pdf',
        pageNumber: 12,
        tableBbox: [80, 150, 500, 400],
        tableRows: 12,
        tableCols: 6,
        organization: 'TechCorp Inc.',
        project: 'Financial Analysis Q4 2024',
        projectId: 1,
        complexity: 'high',
        priority: 'high',
        status: 'pending',
        assignedTo: null,
        createdAt: '2024-01-22',
        dueDate: '2024-01-25',
        requiredSkills: ['Finance', 'Reports'],
        aiDraftStatus: 'not_generated',
        aiDraftGenerationLog: [],
        hasFootnotes: false,
        pdfGroup: 'Financial_Report_Q4_2024.pdf'
      },
      {
        id: 3,
        tableId: 'T003',
        fileName: 'Product_Spec_v2.pdf',
        pageNumber: 3,
        tableBbox: [120, 180, 450, 320],
        tableRows: 6,
        tableCols: 3,
        organization: 'StartupXYZ',
        project: 'Product Documentation Review',
        projectId: 2,
        complexity: 'low',
        priority: 'medium',
        status: 'in_progress',
        assignedTo: 'Sarah Johnson',
        createdAt: '2024-01-21',
        dueDate: '2024-01-24',
        requiredSkills: ['Product', 'Specs'],
        aiDraftStatus: 'generated',
        aiDraftGenerationLog: [],
        hasFootnotes: true,
        pdfGroup: 'Product_Spec_v2.pdf'
      }
    ]);
  }, []);

  // 项目设置
  const projectSettings = {
    1: { autoGenerateDraft: true, projectName: 'Financial Analysis Q4 2024' },
    2: { autoGenerateDraft: false, projectName: 'Product Documentation Review' },
    3: { autoGenerateDraft: true, projectName: 'Legal Contract Analysis' },
    4: { autoGenerateDraft: true, projectName: 'Technical Architecture Review' }
  };

  // 启用的策略
  const enabledStrategies = {
    workload: true,
    skill: true,
    timezone: false,
    performance: true
  };

  // 标注员数据
  const annotators = [
    { id: 1, name: 'Sarah Johnson', org: 'TechCorp Inc.', workload: 8, performance: 96.8, skills: ['Finance', 'Reports'], timezone: 'UTC+8', available: true },
    { id: 2, name: 'Mike Wilson', org: 'LegalFirm LLC', workload: 15, performance: 91.5, skills: ['Legal', 'Contracts'], timezone: 'UTC-5', available: false },
    { id: 3, name: 'Emily Davis', org: 'StartupXYZ', workload: 6, performance: 98.1, skills: ['Product', 'Specs'], timezone: 'UTC+8', available: true },
    { id: 4, name: 'John Smith', org: 'TechCorp Inc.', workload: 12, performance: 94.2, skills: ['Technical', 'Architecture'], timezone: 'UTC+8', available: true },
    { id: 5, name: 'Lisa Chen', org: 'StartupXYZ', workload: 9, performance: 95.7, skills: ['Data', 'Analysis'], timezone: 'UTC+8', available: true }
  ];

  const qaReviewers = [
    { id: 1, name: 'David Brown', org: 'TechCorp Inc.', workload: 5, performance: 97.3, available: true },
    { id: 2, name: 'Anna Wilson', org: 'LegalFirm LLC', workload: 8, performance: 94.8, available: true },
    { id: 3, name: 'Tom Zhang', org: 'StartupXYZ', workload: 3, performance: 96.2, available: true }
  ];

  // 获取选中的任务数据
  const selectedTasksData = tasks.filter(task => selectedTasks.includes(task.id));

  // 过滤合适的标注员
  const getFilteredAnnotators = () => {
    let filteredAnnotators = annotators.filter(a => a.available);

    if (selectedTasks.length === 0) {
      return filteredAnnotators;
    }

    // 应用工作负载策略
    if (enabledStrategies.workload) {
      filteredAnnotators = filteredAnnotators.filter(a => a.workload < 15);
      filteredAnnotators.sort((a, b) => a.workload - b.workload);
    }

    // 应用技能匹配策略
    if (enabledStrategies.skill) {
      const requiredSkills = [...new Set(selectedTasksData.flatMap(task => task.requiredSkills || []))];
      if (requiredSkills.length > 0) {
        filteredAnnotators = filteredAnnotators.filter(a => 
          requiredSkills.some(skill => a.skills.includes(skill))
        );
        filteredAnnotators.sort((a, b) => {
          const aMatches = a.skills.filter(skill => requiredSkills.includes(skill)).length;
          const bMatches = b.skills.filter(skill => requiredSkills.includes(skill)).length;
          return bMatches - aMatches;
        });
      }
    }

    // 应用性能策略
    if (enabledStrategies.performance) {
      filteredAnnotators = filteredAnnotators.filter(a => a.performance >= 90);
      filteredAnnotators.sort((a, b) => b.performance - a.performance);
    }

    return filteredAnnotators;
  };

  const getFilteredQAReviewers = () => {
    let filteredQA = qaReviewers.filter(qa => qa.available);

    if (enabledStrategies.workload) {
      filteredQA = filteredQA.filter(qa => qa.workload < 10);
      filteredQA.sort((a, b) => a.workload - b.workload);
    }

    if (enabledStrategies.performance) {
      filteredQA = filteredQA.filter(qa => qa.performance >= 90);
      filteredQA.sort((a, b) => b.performance - a.performance);
    }

    return filteredQA;
  };

  // 获取推荐理由
  const getRecommendationReason = (person: any, isAnnotator: boolean = true) => {
    const reasons = [];
    
    if (isAnnotator && enabledStrategies.skill && selectedTasks.length > 0) {
      const requiredSkills = [...new Set(selectedTasksData.flatMap(task => task.requiredSkills || []))];
      const matchedSkills = person.skills.filter((skill: string) => requiredSkills.includes(skill));
      if (matchedSkills.length > 0) {
        reasons.push(`技能匹配: ${matchedSkills.join(', ')}`);
      }
    }

    if (enabledStrategies.workload) {
      const threshold = isAnnotator ? 15 : 10;
      if (person.workload < threshold / 2) {
        reasons.push('工作负载轻');
      } else if (person.workload < threshold) {
        reasons.push('工作负载适中');
      }
    }

    if (enabledStrategies.performance) {
      if (person.performance >= 95) {
        reasons.push('表现优秀');
      } else if (person.performance >= 90) {
        reasons.push('表现良好');
      }
    }

    return reasons.length > 0 ? reasons.join(' • ') : '满足基本要求';
  };

  // 处理分配确认
  const handleConfirmAssignment = async () => {
    if (!selectedAssignee) return;
    
    setIsAssigning(true);
    
    // 模拟分配过程
    setTimeout(() => {
      setIsAssigning(false);
      // 返回到任务分配页面
      router.push('/console/system?tab=tasks&assigned=true');
    }, 2000);
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <button
                onClick={() => router.back()}
                className="flex items-center space-x-2 text-gray-600 hover:text-gray-800 cursor-pointer"
              >
                <i className="ri-arrow-left-line w-5 h-5 flex items-center justify-center"></i>
                <span>返回任务分配</span>
              </button>
              <div className="h-6 w-px bg-gray-300"></div>
              <div>
                <h1 className="text-2xl font-bold text-gray-900">智能任务分配</h1>
                <p className="text-sm text-gray-600 mt-1">为选中的 {selectedTasks.length} 个任务分配合适的人员</p>
              </div>
            </div>
            <div className="flex items-center space-x-2 text-sm text-gray-600">
              <i className="ri-magic-line w-4 h-4 flex items-center justify-center text-blue-600"></i>
              <span>基于分配规则筛选</span>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-6xl mx-auto p-6 space-y-6">
        {/* 选中任务概览 */}
        <div className="bg-white rounded-lg shadow-sm p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">选中任务概览</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {selectedTasksData.map((task) => (
              <div key={task.id} className="border border-gray-200 rounded-lg p-4">
                <div className="flex items-start justify-between mb-2">
                  <div className="font-medium text-gray-900 text-sm">{task.tableId}</div>
                  <span className={`px-2 py-1 text-xs rounded-full ${
                    task.complexity === 'high' ? 'bg-red-100 text-red-800' :
                    task.complexity === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                    'bg-green-100 text-green-800'
                  }`}>
                    {task.complexity === 'high' ? '复杂' : task.complexity === 'medium' ? '中等' : '简单'}
                  </span>
                </div>
                <div className="text-sm text-gray-600 mb-2">{task.fileName}</div>
                <div className="text-xs text-gray-500">
                  第 {task.pageNumber} 页 • {task.tableRows}×{task.tableCols} 表格
                </div>
                <div className="flex flex-wrap gap-1 mt-2">
                  {task.requiredSkills?.map((skill: string, index: number) => (
                    <span key={index} className="px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded-full">
                      {skill}
                    </span>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* AI草稿自动生成配置 */}
        <div className="bg-white rounded-lg shadow-sm p-6">
          <div className="border border-blue-200 rounded-lg p-4 bg-blue-50">
            <div className="flex items-start space-x-3">
              <i className="ri-magic-line w-5 h-5 flex items-center justify-center text-blue-600 mt-0.5"></i>
              <div className="flex-1">
                <div className="flex items-center justify-between mb-3">
                  <label className="text-lg font-medium text-blue-900">
                    AI草稿自动生成配置
                  </label>
                  <label className="relative inline-flex items-center cursor-pointer">
                    <input
                      type="checkbox"
                      checked={autoGenerateDraftOnAssign}
                      onChange={(e) => setAutoGenerateDraftOnAssign(e.target.checked)}
                      className="sr-only peer"
                    />
                    <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                  </label>
                </div>
                <div className="text-sm text-blue-700 mb-3">
                  {autoGenerateDraftOnAssign ? (
                    <>
                      <div className="font-medium mb-1">✓ 自动生成已启用</div>
                      <div>分配任务时将自动触发AI草稿生成，提高标注效率</div>
                    </>
                  ) : (
                    <>
                      <div className="font-medium mb-1">✗ 手动生成模式</div>
                      <div>标注员需要在工作台手动点击"Generate Draft"来生成AI草稿</div>
                    </>
                  )}
                </div>
                <div className="text-xs text-blue-600 bg-blue-100 px-3 py-2 rounded-lg">
                  {(() => {
                    const autoGenTasks = selectedTasksData.filter(task => 
                      projectSettings[task.projectId as keyof typeof projectSettings]?.autoGenerateDraft
                    );
                    return autoGenTasks.length > 0 
                      ? `${autoGenTasks.length} / ${selectedTasksData.length} 个任务的项目已启用自动生成`
                      : '所选任务的项目均未启用自动生成，标注员可手动生成草稿';
                  })()}
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* 分配类型选择 */}
        <div className="bg-white rounded-lg shadow-sm p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">分配类型</h3>
          <div className="flex space-x-6">
            <label className="flex items-center space-x-3 cursor-pointer">
              <input
                type="radio"
                checked={assignmentType === 'annotator'}
                onChange={() => setAssignmentType('annotator')}
                className="w-4 h-4 text-blue-600 border-gray-300 focus:ring-blue-500"
              />
              <div>
                <div className="font-medium text-gray-900">标注员</div>
                <div className="text-sm text-gray-500">分配给标注员进行数据标注</div>
              </div>
            </label>
            <label className="flex items-center space-x-3 cursor-pointer">
              <input
                type="radio"
                checked={assignmentType === 'qa'}
                onChange={() => setAssignmentType('qa')}
                className="w-4 h-4 text-blue-600 border-gray-300 focus:ring-blue-500"
              />
              <div>
                <div className="font-medium text-gray-900">QA审核员</div>
                <div className="text-sm text-gray-500">分配给QA审核员进行质量检查</div>
              </div>
            </label>
          </div>
        </div>

        {/* 推荐人员列表 */}
        <div className="bg-white rounded-lg shadow-sm p-6">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-gray-900">
              推荐{assignmentType === 'annotator' ? '标注员' : 'QA审核员'}
            </h3>
            <span className="text-sm text-gray-500">
              {assignmentType === 'annotator' ? getFilteredAnnotators().length : getFilteredQAReviewers().length} 人符合条件
            </span>
          </div>
          
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
            {(assignmentType === 'annotator' ? getFilteredAnnotators() : getFilteredQAReviewers()).map((person) => (
              <label key={person.id} className="flex items-start space-x-4 p-4 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer">
                <input
                  type="radio"
                  name="assignee"
                  checked={selectedAssignee?.id === person.id}
                  onChange={() => setSelectedAssignee(person)}
                  className="w-4 h-4 text-blue-600 border-gray-300 focus:ring-blue-500 mt-1"
                />
                <div className="flex-1 min-w-0">
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center space-x-3">
                      <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                        <span className="text-sm font-medium text-blue-600">
                          {person.name.split(' ').map((n: string) => n[0]).join('')}
                        </span>
                      </div>
                      <div>
                        <div className="font-medium text-gray-900">{person.name}</div>
                        <div className="text-sm text-gray-500">{person.org}</div>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="text-sm text-gray-600">{person.workload} 个任务</div>
                      <div className="text-sm text-green-600">{person.performance}% 质量</div>
                    </div>
                  </div>
                  
                  {assignmentType === 'annotator' && 'skills' in person && (
                    <div className="flex flex-wrap gap-1 mb-3">
                      {person.skills.map((skill: string, index: number) => (
                        <span key={index} className="px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded-full">
                          {skill}
                        </span>
                      ))}
                    </div>
                  )}
                  
                  <div className="text-xs text-blue-600 bg-blue-50 px-3 py-2 rounded-lg">
                    推荐理由: {getRecommendationReason(person, assignmentType === 'annotator')}
                  </div>
                </div>
              </label>
            ))}
          </div>

          {(assignmentType === 'annotator' ? getFilteredAnnotators() : getFilteredQAReviewers()).length === 0 && (
            <div className="text-center py-8">
              <i className="ri-user-unfollow-line w-12 h-12 flex items-center justify-center mx-auto mb-4 text-gray-300"></i>
              <div className="text-lg font-medium text-gray-900 mb-2">暂无符合条件的{assignmentType === 'annotator' ? '标注员' : 'QA审核员'}</div>
              <div className="text-sm text-gray-500">请调整分配规则或手动选择人员</div>
            </div>
          )}
        </div>

        {/* 智能推荐说明 */}
        <div className="bg-green-50 border border-green-200 rounded-lg p-4">
          <div className="flex items-start space-x-3">
            <i className="ri-lightbulb-line w-5 h-5 flex items-center justify-center text-green-600 mt-0.5"></i>
            <div className="text-sm text-green-700">
              <div className="font-medium mb-1">智能推荐说明</div>
              <div>
                系统已根据当前分配规则自动筛选出最合适的人员。推荐基于工作负载、技能匹配、历史表现等多个因素综合评估。
                当前启用的策略包括：
                {Object.entries(enabledStrategies)
                  .filter(([_, enabled]) => enabled)
                  .map(([key, _]) => {
                    switch(key) {
                      case 'workload': return '工作负载';
                      case 'skill': return '技能匹配';
                      case 'timezone': return '时区';
                      case 'performance': return '历史表现';
                      default: return key;
                    }
                  })
                  .join('、')}
              </div>
            </div>
          </div>
        </div>

        {/* 操作按钮 */}
        <div className="flex items-center justify-end space-x-4 bg-white rounded-lg shadow-sm p-6">
          <button
            onClick={() => router.back()}
            className="px-6 py-3 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg whitespace-nowrap cursor-pointer"
          >
            取消分配
          </button>
          <button
            onClick={handleConfirmAssignment}
            disabled={!selectedAssignee || isAssigning}
            className="px-6 py-3 text-white bg-blue-600 hover:bg-blue-700 rounded-lg whitespace-nowrap cursor-pointer disabled:opacity-50 flex items-center space-x-2"
          >
            {isAssigning ? (
              <>
                <i className="ri-loader-4-line w-4 h-4 flex items-center justify-center animate-spin"></i>
                <span>分配中...</span>
              </>
            ) : (
              <span>确认分配 ({selectedTasks.length} 个任务)</span>
            )}
          </button>
        </div>
      </div>
    </div>
  );
}

export default function SmartAssignPage() {
  return (
    <Suspense fallback={
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <i className="ri-loader-4-line w-8 h-8 flex items-center justify-center mx-auto mb-4 text-blue-600 animate-spin"></i>
          <div className="text-gray-600">加载中...</div>
        </div>
      </div>
    }>
      <SmartAssignContent />
    </Suspense>
  );
}