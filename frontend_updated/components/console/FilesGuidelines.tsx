
'use client';

import { useState } from 'react';

export default function FilesGuidelines() {
  const [activeTab, setActiveTab] = useState('projects');
  const [showCreateProjectModal, setShowCreateProjectModal] = useState(false);
  const [showUploadModal, setShowUploadModal] = useState(false);
  const [selectedProject, setSelectedProject] = useState<any>(null);
  const [selectedFile, setSelectedFile] = useState<any>(null);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [isUploading, setIsUploading] = useState(false);
  const [parseProgress, setParseProgress] = useState(0);
  const [isParsing, setIsParsing] = useState(false);
  const [showParseResults, setShowParseResults] = useState(false);
  const [parseResults, setParseResults] = useState<any>(null);
  const [aiDraftSettings, setAiDraftSettings] = useState({
    autoGenerate: true,
    generateOnAssign: true
  });

  // 新项目创建表单状态
  const [newProjectForm, setNewProjectForm] = useState({
    name: '',
    description: '',
    type: '',
    autoGenerateDraft: true // 默认开启AI草稿自动生成
  });

  const projects = [
    {
      id: 1,
      name: 'Financial Analysis Q4 2024',
      description: '第四季度财务分析项目',
      fileCount: 3,
      totalPages: 135,
      totalTables: 42,
      status: 'active',
      createdAt: '2024-01-15',
      autoGenerateDraft: true, // 项目级AI草稿自动生成设置
      files: [
        {
          id: 1,
          name: 'Financial Report Q4 2024.pdf',
          pages: 45,
          tables: 15,
          status: 'completed',
          uploadedAt: '2024-01-15',
          size: '2.3 MB',
          tasks: 15,
          completedTasks: 15,
          parsedTables: [
            { id: 1, page: 5, bbox: [100, 200, 400, 350], rows: 8, cols: 4, complexity: 'medium', status: 'completed' },
            { id: 2, page: 12, bbox: [80, 150, 500, 400], rows: 12, cols: 6, complexity: 'high', status: 'completed' },
            { id: 3, page: 23, bbox: [120, 180, 450, 320], rows: 6, cols: 3, complexity: 'low', status: 'completed' }
          ]
        },
        {
          id: 2,
          name: 'Budget Analysis.pdf',
          pages: 32,
          tables: 8,
          status: 'in_progress',
          uploadedAt: '2024-01-18',
          size: '1.8 MB',
          tasks: 8,
          completedTasks: 5,
          parsedTables: [
            { id: 4, page: 3, bbox: [90, 160, 480, 300], rows: 10, cols: 5, complexity: 'medium', status: 'in_progress' },
            { id: 5, page: 8, bbox: [110, 140, 420, 280], rows: 7, cols: 4, complexity: 'low', status: 'pending' }
          ]
        },
        {
          id: 3,
          name: 'Revenue Forecast.pdf',
          pages: 58,
          tables: 19,
          status: 'pending',
          uploadedAt: '2024-01-20',
          size: '4.1 MB',
          tasks: 19,
          completedTasks: 0,
          parsedTables: [
            { id: 6, page: 7, bbox: [95, 170, 460, 340], rows: 15, cols: 7, complexity: 'high', status: 'pending' },
            { id: 7, page: 15, bbox: [105, 190, 440, 310], rows: 9, cols: 4, complexity: 'medium', status: 'pending' }
          ]
        }
      ]
    },
    {
      id: 2,
      name: 'Product Documentation Review',
      description: '产品文档审核项目',
      fileCount: 2,
      totalPages: 89,
      totalTables: 22,
      status: 'active',
      createdAt: '2024-01-10',
      autoGenerateDraft: false, // 项目级AI草稿自动生成设置
      files: [
        {
          id: 4,
          name: 'Product Specification.pdf',
          pages: 45,
          tables: 12,
          status: 'in_progress',
          uploadedAt: '2024-01-12',
          size: '3.2 MB',
          tasks: 12,
          completedTasks: 8,
          parsedTables: []
        },
        {
          id: 5,
          name: 'User Manual.pdf',
          pages: 44,
          tables: 10,
          status: 'completed',
          uploadedAt: '2024-01-14',
          size: '2.8 MB',
          tasks: 10,
          completedTasks: 10,
          parsedTables: []
        }
      ]
    }
  ];

  const guidelines = [
    {
      id: 1,
      title: '表格标注规范',
      description: '如何正确标注PDF中的表格结构和内容',
      type: 'document',
      updatedAt: '2024-01-10',
      url: '#'
    },
    {
      id: 2,
      title: '文本提取指南',
      description: '文本内容提取的标准流程和质量要求',
      type: 'video',
      updatedAt: '2024-01-08',
      url: '#'
    },
    {
      id: 3,
      title: '质量检查清单',
      description: '标注完成后的自检项目和标准',
      type: 'checklist',
      updatedAt: '2024-01-05',
      url: '#'
    }
  ];

  const handleFileUpload = async (file: File) => {
    setIsUploading(true);
    setUploadProgress(0);

    // 模拟上传进度
    const uploadInterval = setInterval(() => {
      setUploadProgress(prev => {
        if (prev >= 100) {
          clearInterval(uploadInterval);
          setIsUploading(false);
          // 上传完成后立即开始解析
          startParsing(file);
          return 100;
        }
        return prev + 10;
      });
    }, 200);
  };

  const startParsing = async (file: File) => {
    setIsParsing(true);
    setParseProgress(0);

    // 模拟解析进度
    const parseInterval = setInterval(() => {
      setParseProgress(prev => {
        if (prev >= 100) {
          clearInterval(parseInterval);
          setIsParsing(false);
          // 解析完成，显示结果
          const mockResults = {
            fileName: file.name,
            totalPages: 45,
            tablesFound: 12,
            tables: [
              { id: 1, page: 3, bbox: [100, 150, 450, 300], rows: 8, cols: 4, complexity: 'medium', hasFootnotes: true },
              { id: 2, page: 7, bbox: [80, 200, 480, 400], rows: 12, cols: 6, complexity: 'high', hasFootnotes: false },
              { id: 3, page: 12, bbox: [120, 180, 420, 320], rows: 6, cols: 3, complexity: 'low', hasFootnotes: true },
              { id: 4, page: 18, bbox: [90, 160, 460, 350], rows: 10, cols: 5, complexity: 'medium', hasFootnotes: false },
              { id: 5, page: 25, bbox: [110, 140, 440, 280], rows: 7, cols: 4, complexity: 'low', hasFootnotes: true }
            ]
          };
          setParseResults(mockResults);
          setShowParseResults(true);
          return 100;
        }
        return prev + 8;
      });
    }, 300);
  };

  const handleConfirmParsing = () => {
    // 确认解析结果，创建任务并发送到系统分配
    console.log('Creating tasks and sending to system allocation...');
    setShowParseResults(false);
    setShowUploadModal(false);
    setParseResults(null);
    
    // 这里会触发系统分配模块的任务创建
    alert(`成功解析 ${parseResults?.tablesFound} 个表格，已发送到系统分配管理！`);
  };

  const getStatusColor = (status: string) => {
    const colorMap: { [key: string]: string } = {
      'pending': 'bg-yellow-100 text-yellow-800',
      'in_progress': 'bg-blue-100 text-blue-800',
      'completed': 'bg-green-100 text-green-800',
      'active': 'bg-green-100 text-green-800'
    };
    return colorMap[status] || 'bg-gray-100 text-gray-800';
  };

  const getStatusLabel = (status: string) => {
    const labelMap: { [key: string]: string } = {
      'pending': '待处理',
      'in_progress': '进行中',
      'completed': '已完成',
      'active': '进行中'
    };
    return labelMap[status] || status;
  };

  const getTypeIcon = (type: string) => {
    const iconMap: { [key: string]: string } = {
      'document': 'ri-file-text-line',
      'video': 'ri-video-line',
      'checklist': 'ri-checkbox-line'
    };
    return iconMap[type] || 'ri-file-line';
  };

  const getProgressPercentage = (completed: number, total: number) => {
    return total > 0 ? Math.round((completed / total) * 100) : 0;
  };

  const getComplexityColor = (complexity: string) => {
    switch (complexity) {
      case 'high': return 'bg-red-100 text-red-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'low': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getComplexityLabel = (complexity: string) => {
    switch (complexity) {
      case 'high': return '复杂';
      case 'medium': return '中等';
      case 'low': return '简单';
      default: return complexity;
    }
  };

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-xl font-semibold text-gray-900">文件与指南管理</h2>
          <p className="text-sm text-gray-600 mt-1">管理项目文件和标注指南，支持智能解析与任务分配</p>
        </div>
        {!selectedProject && (
          <button
            onClick={() => setShowCreateProjectModal(true)}
            className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center space-x-2 whitespace-nowrap cursor-pointer"
          >
            <i className="ri-add-line w-4 h-4 flex items-center justify-center"></i>
            <span>创建项目</span>
          </button>
        )}
        {selectedProject && (
          <div className="flex items-center space-x-3">
            <button
              onClick={() => setSelectedProject(null)}
              className="text-gray-600 hover:text-gray-700 px-3 py-2 rounded-lg hover:bg-gray-100 flex items-center space-x-2 whitespace-nowrap cursor-pointer"
            >
              <i className="ri-arrow-left-line w-4 h-4 flex items-center justify-center"></i>
              <span>返回项目列表</span>
            </button>
            <button
              onClick={() => setShowUploadModal(true)}
              className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center space-x-2 whitespace-nowrap cursor-pointer"
            >
              <i className="ri-upload-line w-4 h-4 flex items-center justify-center"></i>
              <span>上传PDF</span>
            </button>
          </div>
        )}
      </div>

      {/* Breadcrumb */}
      {selectedProject && (
        <div className="flex items-center space-x-2 text-sm text-gray-600">
          <span>Project Files</span>
          <i className="ri-arrow-right-s-line w-4 h-4 flex items-center justify-center"></i>
          <span className="font-medium text-gray-900">{selectedProject.name}</span>
        </div>
      )}

      {/* Tabs */}
      <div className="border-b border-gray-200">
        <nav className="flex space-x-8">
          {[
            { id: 'projects', label: '项目文件', icon: 'ri-folder-line' },
            { id: 'guidelines', label: '标注指南', icon: 'ri-book-line' }
          ].map((tab) => (
            <button
              key={tab.id}
              onClick={() => {
                setActiveTab(tab.id);
                if (tab.id === 'projects') {
                  setSelectedProject(null);
                }
              }}
              className={`flex items-center space-x-2 py-4 px-1 border-b-2 font-medium text-sm whitespace-nowrap cursor-pointer ${
                activeTab === tab.id
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              <i className={`${tab.icon} w-4 h-4 flex items-center justify-center`}></i>
              <span>{tab.label}</span>
            </button>
          ))}
        </nav>
      </div>

      {activeTab === 'projects' && !selectedProject && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {projects.map((project) => (
            <div key={project.id} className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow cursor-pointer">
              <div className="flex items-start justify-between mb-4">
                <div className="flex items-center space-x-3">
                  <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                    <i className="ri-folder-3-line w-5 h-5 flex items-center justify-center text-blue-600"></i>
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900">{project.name}</h3>
                    <p className="text-sm text-gray-600">{project.description}</p>
                  </div>
                </div>
                <span className={`px-2 py-1 text-xs rounded-full ${getStatusColor(project.status)}`}>
                  {getStatusLabel(project.status)}
                </span>
              </div>
              
              <div className="space-y-3 mb-4">
                <div className="flex items-center justify-between text-sm">
                  <span className="text-gray-600">文件数量</span>
                  <span className="font-medium text-gray-900">{project.fileCount} 个</span>
                </div>
                <div className="flex items-center justify-between text-sm">
                  <span className="text-gray-600">总页数</span>
                  <span className="font-medium text-gray-900">{project.totalPages} 页</span>
                </div>
                <div className="flex items-center justify-between text-sm">
                  <span className="text-gray-600">表格数量</span>
                  <span className="font-medium text-gray-900">{project.totalTables} 个</span>
                </div>
                <div className="flex items-center justify-between text-sm">
                  <span className="text-gray-600">AI草稿自动生成</span>
                  <span className={`px-2 py-1 text-xs rounded-full ${project.autoGenerateDraft ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'}`}>
                    {project.autoGenerateDraft ? '已启用' : '已关闭'}
                  </span>
                </div>
              </div>
              
              <button
                onClick={() => setSelectedProject(project)}
                className="w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 text-sm font-medium whitespace-nowrap cursor-pointer"
              >
                查看文件
              </button>
            </div>
          ))}
          
          <div className="bg-gray-50 rounded-lg border-2 border-dashed border-gray-300 p-6 flex flex-col items-center justify-center">
            <i className="ri-add-line w-8 h-8 flex items-center justify-center text-gray-400 mb-2"></i>
            <h3 className="text-sm font-medium text-gray-900 mb-1">创建新项目</h3>
            <p className="text-xs text-gray-500 text-center mb-4">创建项目后可以上传PDF文件</p>
            <button
              onClick={() => setShowCreateProjectModal(true)}
              className="text-blue-600 hover:text-blue-700 text-sm cursor-pointer"
            >
              创建项目
            </button>
          </div>
        </div>
      )}

      {activeTab === 'projects' && selectedProject && (
        <div className="bg-white rounded-lg shadow-sm overflow-hidden">
          <div className="p-4 bg-gray-50 border-b border-gray-200">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="text-lg font-semibold text-gray-900">{selectedProject.name}</h3>
                <p className="text-sm text-gray-600">{selectedProject.description}</p>
              </div>
              <div className="flex items-center space-x-4 text-sm text-gray-600">
                <div className="flex items-center space-x-1">
                  <i className="ri-file-line w-4 h-4 flex items-center justify-center"></i>
                  <span>{selectedProject.fileCount} 个文件</span>
                </div>
                <div className="flex items-center space-x-1">
                  <i className="ri-pages-line w-4 h-4 flex items-center justify-center"></i>
                  <span>{selectedProject.totalPages} 页</span>
                </div>
                <div className="flex items-center space-x-1">
                  <i className="ri-table-line w-4 h-4 flex items-center justify-center"></i>
                  <span>{selectedProject.totalTables} 个表格</span>
                </div>
              </div>
            </div>
          </div>
          
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50 border-b border-gray-200">
                <tr>
                  <th className="text-left py-3 px-4 font-medium text-gray-900">文件名</th>
                  <th className="text-left py-3 px-4 font-medium text-gray-900">页数/表格</th>
                  <th className="text-left py-3 px-4 font-medium text-gray-900">任务进度</th>
                  <th className="text-left py-3 px-4 font-medium text-gray-900">状态</th>
                  <th className="text-left py-3 px-4 font-medium text-gray-900">上传时间</th>
                  <th className="text-left py-3 px-4 font-medium text-gray-900">操作</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {selectedProject.files.map((file: any) => (
                  <tr key={file.id} className="hover:bg-gray-50">
                    <td className="py-4 px-4">
                      <div className="flex items-center space-x-3">
                        <i className="ri-file-pdf-line w-5 h-5 flex items-center justify-center text-red-500"></i>
                        <div>
                          <div className="font-medium text-gray-900">{file.name}</div>
                          <div className="text-sm text-gray-500">{file.size}</div>
                        </div>
                      </div>
                    </td>
                    <td className="py-4 px-4">
                      <div className="text-sm">
                        <div className="text-gray-900">{file.pages} 页</div>
                        <div className="text-gray-500">{file.tables} 个表格</div>
                      </div>
                    </td>
                    <td className="py-4 px-4">
                      <div className="space-y-1">
                        <div className="flex items-center justify-between text-sm">
                          <span>{file.completedTasks}/{file.tasks}</span>
                          <span className="text-gray-500">{getProgressPercentage(file.completedTasks, file.tasks)}%</span>
                        </div>
                        <div className="w-24 bg-gray-200 rounded-full h-2">
                          <div
                            className="bg-blue-500 h-2 rounded-full"
                            style={{ width: `${getProgressPercentage(file.completedTasks, file.tasks)}%` }}
                          ></div>
                        </div>
                      </div>
                    </td>
                    <td className="py-4 px-4">
                      <span className={`px-2 py-1 text-xs rounded-full ${getStatusColor(file.status)}`}>
                        {getStatusLabel(file.status)}
                      </span>
                    </td>
                    <td className="py-4 px-4">
                      <span className="text-sm text-gray-600">{file.uploadedAt}</span>
                    </td>
                    <td className="py-4 px-4">
                      <div className="flex items-center space-x-2">
                        <button 
                          onClick={() => setSelectedFile(file)}
                          className="text-blue-600 hover:text-blue-700 text-sm cursor-pointer"
                        >
                          查看表格
                        </button>
                        <button className="text-gray-600 hover:text-gray-700 text-sm cursor-pointer">
                          替换
                        </button>
                        <button className="text-red-600 hover:text-red-700 text-sm cursor-pointer">
                          删除
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
          
          {selectedProject.files.length === 0 && (
            <div className="p-8 text-center">
              <i className="ri-file-upload-line w-12 h-12 flex items-center justify-center text-gray-300 mx-auto mb-4"></i>
              <h3 className="text-lg font-medium text-gray-900 mb-2">项目中暂无文件</h3>
              <p className="text-gray-600 mb-4">上传PDF文件开始标注任务</p>
              <button
                onClick={() => setShowUploadModal(true)}
                className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 whitespace-nowrap cursor-pointer"
              >
                上传PDF文件
              </button>
            </div>
          )}
        </div>
      )}

      {activeTab === 'guidelines' && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {guidelines.map((guide) => (
            <div key={guide.id} className="bg-white rounded-lg shadow-sm p-6">
              <div className="flex items-start space-x-3">
                <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                  <i className={`${getTypeIcon(guide.type)} w-5 h-5 flex items-center justify-center text-blue-600`}></i>
                </div>
                <div className="flex-1">
                  <h3 className="text-lg font-semibold text-gray-900 mb-2">{guide.title}</h3>
                  <p className="text-sm text-gray-600 mb-4">{guide.description}</p>
                  <div className="flex items-center justify-between">
                    <span className="text-xs text-gray-500">更新于 {guide.updatedAt}</span>
                    <button className="text-blue-600 hover:text-blue-700 text-sm cursor-pointer">
                      查看详情
                    </button>
                  </div>
                </div>
              </div>
            </div>
          ))}
          
          <div className="bg-gray-50 rounded-lg border-2 border-dashed border-gray-300 p-6 flex flex-col items-center justify-center">
            <i className="ri-add-line w-8 h-8 flex items-center justify-center text-gray-400 mb-2"></i>
            <h3 className="text-sm font-medium text-gray-900 mb-1">添加新指南</h3>
            <p className="text-xs text-gray-500 text-center mb-4">创建新的标注指南或上传文档</p>
            <button className="text-blue-600 hover:text-blue-700 text-sm cursor-pointer">
              创建指南
            </button>
          </div>
        </div>
      )}

      {/* Create Project Modal */}
      {showCreateProjectModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-[500px] max-w-90vw">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">创建新项目</h3>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  项目名称 *
                </label>
                <input
                  type="text"
                  value={newProjectForm.name}
                  onChange={(e) => setNewProjectForm({...newProjectForm, name: e.target.value})}
                  placeholder="输入项目名称"
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  项目描述
                </label>
                <textarea
                  value={newProjectForm.description}
                  onChange={(e) => setNewProjectForm({...newProjectForm, description: e.target.value})}
                  placeholder="输入项目描述..."
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  项目类型
                </label>
                <select 
                  value={newProjectForm.type}
                  onChange={(e) => setNewProjectForm({...newProjectForm, type: e.target.value})}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="">选择项目类型</option>
                  <option value="financial">财务分析</option>
                  <option value="legal">法律文档</option>
                  <option value="technical">技术文档</option>
                  <option value="product">产品文档</option>
                  <option value="other">其他</option>
                </select>
              </div>

              {/* AI草稿自动生成配置 */}
              <div className="border border-blue-200 rounded-lg p-4 bg-blue-50">
                <div className="flex items-start space-x-3">
                  <i className="ri-magic-line w-5 h-5 flex items-center justify-center text-blue-600 mt-0.5"></i>
                  <div className="flex-1">
                    <div className="flex items-center justify-between mb-2">
                      <label className="text-sm font-medium text-blue-900">
                        Auto-Generate Draft on Assign
                      </label>
                      <label className="relative inline-flex items-center cursor-pointer">
                        <input
                          type="checkbox"
                          checked={newProjectForm.autoGenerateDraft}
                          onChange={(e) => setNewProjectForm({...newProjectForm, autoGenerateDraft: e.target.checked})}
                          className="sr-only peer"
                        />
                        <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                      </label>
                    </div>
                    <div className="text-xs text-blue-700">
                      {newProjectForm.autoGenerateDraft ? (
                        <>
                          <div className="font-medium mb-1">✓ 已启用自动生成</div>
                          <div>当任务分配给标注员时，系统将自动生成AI草稿，提高标注效率</div>
                        </>
                      ) : (
                        <>
                          <div className="font-medium mb-1">✗ 手动生成模式</div>
                          <div>标注员需要在工作台手动点击"Generate Draft"来生成AI草稿</div>
                        </>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>
            
            <div className="flex items-center justify-end space-x-3 mt-6">
              <button
                onClick={() => {
                  setShowCreateProjectModal(false);
                  setNewProjectForm({
                    name: '',
                    description: '',
                    type: '',
                    autoGenerateDraft: true
                  });
                }}
                className="px-4 py-2 text-sm text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg whitespace-nowrap cursor-pointer"
              >
                取消
              </button>
              <button
                onClick={() => {
                  console.log('Creating project with settings:', newProjectForm);
                  setShowCreateProjectModal(false);
                  setNewProjectForm({
                    name: '',
                    description: '',
                    type: '',
                    autoGenerateDraft: true
                  });
                }}
                disabled={!newProjectForm.name.trim()}
                className="px-4 py-2 text-sm text-white bg-blue-600 hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed rounded-lg whitespace-nowrap cursor-pointer"
              >
                创建项目
              </button>
            </div>
          </div>
        </div>
      )}

      {/* File Detail Modal - 显示解析的表格列表 */}
      {selectedFile && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-[800px] max-w-90vw max-h-80vh overflow-y-auto">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-900">表格解析结果</h3>
              <button
                onClick={() => setSelectedFile(null)}
                className="text-gray-400 hover:text-gray-600 cursor-pointer"
              >
                <i className="ri-close-line w-5 h-5 flex items-center justify-center"></i>
              </button>
            </div>
            
            <div className="space-y-4 mb-6">
              <div className="grid grid-cols-3 gap-4 text-sm">
                <div>
                  <label className="block font-medium text-gray-700 mb-1">文件名</label>
                  <p className="text-gray-900">{selectedFile.name}</p>
                </div>
                <div>
                  <label className="block font-medium text-gray-700 mb-1">总页数</label>
                  <p className="text-gray-900">{selectedFile.pages}</p>
                </div>
                <div>
                  <label className="block font-medium text-gray-700 mb-1">表格数量</label>
                  <p className="text-gray-900">{selectedFile.tables}</p>
                </div>
              </div>
            </div>

            {selectedFile.parsedTables && selectedFile.parsedTables.length > 0 && (
              <div>
                <h4 className="text-md font-semibold text-gray-900 mb-3">解析的表格列表</h4>
                <div className="overflow-x-auto">
                  <table className="w-full text-sm">
                    <thead className="bg-gray-50 border-b border-gray-200">
                      <tr>
                        <th className="text-left py-2 px-3 font-medium text-gray-900">表格ID</th>
                        <th className="text-left py-2 px-3 font-medium text-gray-900">页码</th>
                        <th className="text-left py-2 px-3 font-medium text-gray-900">位置(bbox)</th>
                        <th className="text-left py-2 px-3 font-medium text-gray-900">行/列</th>
                        <th className="text-left py-2 px-3 font-medium text-gray-900">复杂度</th>
                        <th className="text-left py-2 px-3 font-medium text-gray-900">状态</th>
                      </tr>
                    </thead>
                    <tbody className="divide-y divide-gray-200">
                      {selectedFile.parsedTables.map((table: any) => (
                        <tr key={table.id} className="hover:bg-gray-50">
                          <td className="py-2 px-3">
                            <span className="font-mono text-blue-600">#{table.id}</span>
                          </td>
                          <td className="py-2 px-3">
                            <span className="text-gray-900">第 {table.page} 页</span>
                          </td>
                          <td className="py-2 px-3">
                            <span className="text-xs text-gray-600 font-mono">
                              [{table.bbox.join(', ')}]
                            </span>
                          </td>
                          <td className="py-2 px-3">
                            <span className="text-gray-900">{table.rows}×{table.cols}</span>
                          </td>
                          <td className="py-2 px-3">
                            <span className={`px-2 py-1 text-xs rounded-full ${getComplexityColor(table.complexity)}`}>
                              {getComplexityLabel(table.complexity)}
                            </span>
                          </td>
                          <td className="py-2 px-3">
                            <span className={`px-2 py-1 text-xs rounded-full ${getStatusColor(table.status)}`}>
                              {getStatusLabel(table.status)}
                            </span>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            )}
            
            <div className="flex items-center justify-end space-x-3 mt-6">
              <button
                onClick={() => setSelectedFile(null)}
                className="px-4 py-2 text-sm text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg whitespace-nowrap cursor-pointer"
              >
                关闭
              </button>
              <button className="px-4 py-2 text-sm text-white bg-blue-600 hover:bg-blue-700 rounded-lg whitespace-nowrap cursor-pointer">
                查看PDF
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Upload Modal */}
      {showUploadModal && selectedProject && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-[500px] max-w-90vw">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">上传PDF文件</h3>
            <p className="text-sm text-gray-600 mb-4">项目：{selectedProject.name}</p>
            
            <div className="space-y-4">
              {!isUploading && !isParsing && !showParseResults && (
                <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
                  <i className="ri-upload-cloud-line w-12 h-12 flex items-center justify-center text-gray-400 mx-auto mb-4"></i>
                  <p className="text-sm text-gray-600 mb-2">拖拽文件到此处或点击选择</p>
                  <p className="text-xs text-gray-500 mb-4">支持 PDF 格式，最大 50MB</p>
                  <p className="text-xs text-blue-600 mb-4">上传后将自动解析表格结构并创建任务</p>
                  <input 
                    type="file" 
                    accept=".pdf" 
                    className="hidden" 
                    onChange={(e) => {
                      const file = e.target.files?.[0];
                      if (file) handleFileUpload(file);
                    }}
                    id="file-upload"
                  />
                  <label 
                    htmlFor="file-upload"
                    className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 text-sm whitespace-nowrap cursor-pointer inline-block"
                  >
                    选择文件
                  </label>
                </div>
              )}

              {/* Upload Progress */}
              {isUploading && (
                <div className="space-y-3">
                  <div className="flex items-center space-x-3">
                    <i className="ri-upload-line w-5 h-5 flex items-center justify-center text-blue-600"></i>
                    <span className="text-sm font-medium text-gray-900">正在上传文件...</span>
                    <span className="text-sm text-gray-600">{uploadProgress}%</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div
                      className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                      style={{ width: `${uploadProgress}%` }}
                    ></div>
                  </div>
                </div>
              )}

              {/* Parse Progress */}
              {isParsing && (
                <div className="space-y-3">
                  <div className="flex items-center space-x-3">
                    <i className="ri-search-line w-5 h-5 flex items-center justify-center text-green-600 animate-spin"></i>
                    <span className="text-sm font-medium text-gray-900">正在解析表格结构...</span>
                    <span className="text-sm text-gray-600">{parseProgress}%</span>
                  </div>
                  <div className="w-full bg-gray-200 rounded-full h-2">
                    <div
                      className="bg-green-600 h-2 rounded-full transition-all duration-300"
                      style={{ width: `${parseProgress}%` }}
                    ></div>
                  </div>
                  <p className="text-xs text-gray-500">正在识别表格位置、行列结构、合并单元格等信息...</p>
                </div>
              )}
            </div>
            
            <div className="flex items-center justify-end space-x-3 mt-6">
              <button
                onClick={() => {
                  setShowUploadModal(false);
                  setIsUploading(false);
                  setIsParsing(false);
                  setUploadProgress(0);
                  setParseProgress(0);
                }}
                disabled={isUploading || isParsing}
                className="px-4 py-2 text-sm text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg whitespace-nowrap cursor-pointer disabled:opacity-50"
              >
                取消
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Parse Results Modal */}
      {showParseResults && parseResults && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-[700px] max-w-90vw max-h-80vh overflow-y-auto">
            <div className="flex items-center space-x-3 mb-4">
              <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
                <i className="ri-check-line w-4 h-4 flex items-center justify-center text-green-600"></i>
              </div>
              <h3 className="text-lg font-semibold text-gray-900">解析完成</h3>
            </div>
            
            <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
              <div className="grid grid-cols-3 gap-4 text-sm">
                <div>
                  <div className="font-medium text-green-900">文件名</div>
                  <div className="text-green-700">{parseResults.fileName}</div>
                </div>
                <div>
                  <div className="font-medium text-green-900">总页数</div>
                  <div className="text-green-700">{parseResults.totalPages} 页</div>
                </div>
                <div>
                  <div className="font-medium text-green-900">发现表格</div>
                  <div className="text-green-700">{parseResults.tablesFound} 个</div>
                </div>
              </div>
            </div>

            <div className="mb-6">
              <h4 className="text-md font-semibold text-gray-900 mb-3">表格详情</h4>
              <div className="overflow-x-auto">
                <table className="w-full text-sm">
                  <thead className="bg-gray-50 border-b border-gray-200">
                    <tr>
                      <th className="text-left py-2 px-3 font-medium text-gray-900">表格</th>
                      <th className="text-left py-2 px-3 font-medium text-gray-900">页码</th>
                      <th className="text-left py-2 px-3 font-medium text-gray-900">行/列</th>
                      <th className="text-left py-2 px-3 font-medium text-gray-900">复杂度</th>
                      <th className="text-left py-2 px-3 font-medium text-gray-900">脚注</th>
                    </tr>
                  </thead>
                  <tbody className="divide-y divide-gray-200">
                    {parseResults.tables.map((table: any) => (
                      <tr key={table.id} className="hover:bg-gray-50">
                        <td className="py-2 px-3">
                          <span className="font-mono text-blue-600">表格 #{table.id}</span>
                        </td>
                        <td className="py-2 px-3">
                          <span className="text-gray-900">第 {table.page} 页</span>
                        </td>
                        <td className="py-2 px-3">
                          <span className="text-gray-900">{table.rows}×{table.cols}</span>
                        </td>
                        <td className="py-2 px-3">
                          <span className={`px-2 py-1 text-xs rounded-full ${getComplexityColor(table.complexity)}`}>
                            {getComplexityLabel(table.complexity)}
                          </span>
                        </td>
                        <td className="py-2 px-3">
                          <span className={`px-2 py-1 text-xs rounded-full ${table.hasFootnotes ? 'bg-blue-100 text-blue-800' : 'bg-gray-100 text-gray-800'}`}>
                            {table.hasFootnotes ? '有' : '无'}
                          </span>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>

            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
              <div className="flex items-start space-x-3">
                <i className="ri-information-line w-5 h-5 flex items-center justify-center text-blue-600 mt-0.5"></i>
                <div className="text-sm">
                  <div className="font-medium text-blue-900 mb-1">任务创建说明</div>
                  <div className="text-blue-700">
                    • 每个表格将创建为独立的标注任务<br/>
                    • 所有任务将进入"待分配"状态<br/>
                    • 系统管理员可在"任务分配管理"中分配任务<br/>
                    • 当前项目的AI草稿设置：{selectedProject?.autoGenerateDraft ? '自动生成已启用' : '需手动生成'}
                  </div>
                </div>
              </div>
            </div>
            
            <div className="flex items-center justify-end space-x-3">
              <button
                onClick={() => {
                  setShowParseResults(false);
                  setParseResults(null);
                  setShowUploadModal(false);
                }}
                className="px-4 py-2 text-sm text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg whitespace-nowrap cursor-pointer"
              >
                取消
              </button>
              <button
                onClick={handleConfirmParsing}
                className="px-4 py-2 text-sm text-white bg-blue-600 hover:bg-blue-700 rounded-lg whitespace-nowrap cursor-pointer"
              >
                确认并创建任务
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
