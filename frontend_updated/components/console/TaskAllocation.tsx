
'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';

export default function TaskAllocation() {
  const router = useRouter();
  const [searchTerm, setSearchTerm] = useState('');
  const [orgFilter, setOrgFilter] = useState('all');
  const [statusFilter, setStatusFilter] = useState('all');
  const [selectedTasks, setSelectedTasks] = useState<number[]>([]);
  const [showAssignModal, setShowAssignModal] = useState(false);
  const [assignmentType, setAssignmentType] = useState<'annotator' | 'qa'>('annotator');
  const [activeTab, setActiveTab] = useState('tasks');
  const [autoMode, setAutoMode] = useState(true);
  const [showSaveModal, setShowSaveModal] = useState(false);
  const [assignmentMode, setAssignmentMode] = useState<'table' | 'pdf'>('table');
  const [enabledStrategies, setEnabledStrategies] = useState({
    workload: true,
    skill: true,
    timezone: false,
    performance: true
  });
  const [selectedAssignee, setSelectedAssignee] = useState<any>(null);
  const [isAssigning, setIsAssigning] = useState(false);
  // 新增：AI草稿自动生成开关状态
  const [autoGenerateDraftOnAssign, setAutoGenerateDraftOnAssign] = useState(true);

  // Add missing allocation strategy data
  const allocationStrategies = [
    {
      id: 'workload',
      name: 'Workload-based Assignment',
      description: 'Prioritize assignment to annotators with lighter workloads'
    },
    {
      id: 'skill',
      name: 'Skill-based Assignment',
      description: 'Intelligently match tasks based on annotator expertise'
    },
    {
      id: 'timezone',
      name: 'Timezone-based Assignment',
      description: 'Consider annotator working timezones for assignment'
    },
    {
      id: 'performance',
      name: 'Performance-based Assignment',
      description: 'Prioritize assignment to high-performing annotators'
    }
  ];

  // Add missing current rules data
  const currentRules = [
    {
      id: 1,
      name: 'High Priority Task Rule',
      condition: 'Priority = High',
      action: 'Assign to experienced annotators',
      status: 'active'
    },
    {
      id: 2,
      name: 'Financial Document Rule',
      condition: 'Document Type = Financial Report',
      action: 'Assign to annotators with financial background',
      status: 'active'
    },
    {
      id: 3,
      name: 'Workload Balance Rule',
      condition: 'Annotator Task Count > 15',
      action: 'Pause new task assignments',
      status: 'active'
    },
    {
      id: 4,
      name: 'Quality Assurance Rule',
      condition: 'QA Pass Rate < 85%',
      action: 'Increase QA review frequency',
      status: 'inactive'
    }
  ];

  // Project settings for AI Draft auto-generation
  const projectSettings = {
    1: { autoGenerateDraft: true, projectName: 'Financial Analysis Q4 2024' },
    2: { autoGenerateDraft: false, projectName: 'Product Documentation Review' },
    3: { autoGenerateDraft: true, projectName: 'Legal Contract Analysis' },
    4: { autoGenerateDraft: true, projectName: 'Technical Architecture Review' }
  };

  // Update task data structure with table as minimum unit
  const [tasks, setTasks] = useState([
    {
      id: 1,
      tableId: 'T001',
      fileName: 'Financial_Report_Q4_2024.pdf',
      pageNumber: 5,
      tableBbox: [100, 200, 400, 350],
      tableRows: 8,
      tableCols: 4,
      organization: 'TechCorp Inc.',
      project: 'Financial Analysis Q4 2024',
      projectId: 1,
      complexity: 'medium',
      priority: 'high',
      status: 'pending',
      assignedTo: null,
      createdAt: '2024-01-22',
      dueDate: '2024-01-25',
      requiredSkills: ['Finance', 'Reports'],
      aiDraftStatus: 'not_generated',
      aiDraftGenerationLog: [],
      hasFootnotes: true,
      pdfGroup: 'Financial_Report_Q4_2024.pdf'
    },
    {
      id: 2,
      tableId: 'T002',
      fileName: 'Financial_Report_Q4_2024.pdf',
      pageNumber: 12,
      tableBbox: [80, 150, 500, 400],
      tableRows: 12,
      tableCols: 6,
      organization: 'TechCorp Inc.',
      project: 'Financial Analysis Q4 2024',
      projectId: 1,
      complexity: 'high',
      priority: 'high',
      status: 'pending',
      assignedTo: null,
      createdAt: '2024-01-22',
      dueDate: '2024-01-25',
      requiredSkills: ['Finance', 'Reports'],
      aiDraftStatus: 'not_generated',
      aiDraftGenerationLog: [],
      hasFootnotes: false,
      pdfGroup: 'Financial_Report_Q4_2024.pdf'
    },
    {
      id: 3,
      tableId: 'T003',
      fileName: 'Product_Spec_v2.pdf',
      pageNumber: 3,
      tableBbox: [120, 180, 450, 320],
      tableRows: 6,
      tableCols: 3,
      organization: 'StartupXYZ',
      project: 'Product Documentation Review',
      projectId: 2,
      complexity: 'low',
      priority: 'medium',
      status: 'in_progress',
      assignedTo: 'Sarah Johnson',
      createdAt: '2024-01-21',
      dueDate: '2024-01-24',
      requiredSkills: ['Product', 'Specs'],
      aiDraftStatus: 'generated',
      aiDraftGenerationLog: [
        { timestamp: '2024-01-21 15:30', event: 'generation_started', details: 'Manual generation by annotator' },
        { timestamp: '2024-01-21 15:32', event: 'generation_success', details: 'AI draft generated successfully' }
      ],
      hasFootnotes: true,
      pdfGroup: 'Product_Spec_v2.pdf'
    },
    {
      id: 4,
      tableId: 'T004',
      fileName: 'Legal_Contract_2024.pdf',
      pageNumber: 8,
      tableBbox: [90, 160, 480, 300],
      tableRows: 10,
      tableCols: 5,
      organization: 'LegalFirm LLC',
      project: 'Legal Contract Analysis',
      projectId: 3,
      complexity: 'high',
      priority: 'high',
      status: 'qa_pending',
      assignedTo: 'Mike Wilson',
      createdAt: '2024-01-20',
      dueDate: '2024-01-23',
      requiredSkills: ['Legal', 'Contracts'],
      aiDraftStatus: 'generated',
      aiDraftGenerationLog: [
        { timestamp: '2024-01-20 10:15', event: 'auto_generation_started', details: 'Auto-generation triggered on assignment' },
        { timestamp: '2024-01-20 10:17', event: 'generation_success', details: 'AI draft auto-generated successfully' }
      ],
      hasFootnotes: false,
      pdfGroup: 'Legal_Contract_2024.pdf'
    },
    {
      id: 5,
      tableId: 'T005',
      fileName: 'Architecture_Doc.pdf',
      pageNumber: 15,
      tableBbox: [110, 140, 420, 280],
      tableRows: 7,
      tableCols: 4,
      organization: 'TechCorp Inc.',
      project: 'Technical Architecture Review',
      projectId: 4,
      complexity: 'medium',
      priority: 'low',
      status: 'completed',
      assignedTo: 'Emily Davis',
      createdAt: '2024-01-19',
      dueDate: '2024-01-22',
      requiredSkills: ['Technical', 'Architecture'],
      aiDraftStatus: 'failed',
      aiDraftGenerationLog: [
        { timestamp: '2024-01-19 14:20', event: 'auto_generation_started', details: 'Auto-generation triggered on assignment' },
        { timestamp: '2024-01-19 14:22', event: 'generation_failed', details: 'AI service timeout error' },
        { timestamp: '2024-01-19 16:45', event: 'manual_retry_started', details: 'Manual retry by annotator' },
        { timestamp: '2024-01-19 16:47', event: 'generation_failed', details: 'AI service unavailable' }
      ],
      hasFootnotes: true,
      pdfGroup: 'Architecture_Doc.pdf'
    }
  ]);

  // System Admin can see annotators and QA from all organizations
  const annotators = [
    { id: 1, name: 'Sarah Johnson', org: 'TechCorp Inc.', workload: 8, performance: 96.8, skills: ['Finance', 'Reports'], timezone: 'UTC+8', available: true },
    { id: 2, name: 'Mike Wilson', org: 'LegalFirm LLC', workload: 15, performance: 91.5, skills: ['Legal', 'Contracts'], timezone: 'UTC-5', available: false },
    { id: 3, name: 'Emily Davis', org: 'StartupXYZ', workload: 6, performance: 98.1, skills: ['Product', 'Specs'], timezone: 'UTC+8', available: true },
    { id: 4, name: 'John Smith', org: 'TechCorp Inc.', workload: 12, performance: 94.2, skills: ['Technical', 'Architecture'], timezone: 'UTC+8', available: true },
    { id: 5, name: 'Lisa Chen', org: 'StartupXYZ', workload: 9, performance: 95.7, skills: ['Data', 'Analysis'], timezone: 'UTC+8', available: true }
  ];

  const qaReviewers = [
    { id: 1, name: 'David Brown', org: 'TechCorp Inc.', workload: 5, performance: 97.3, available: true },
    { id: 2, name: 'Anna Wilson', org: 'LegalFirm LLC', workload: 8, performance: 94.8, available: true },
    { id: 3, name: 'Tom Zhang', org: 'StartupXYZ', workload: 3, performance: 96.2, available: true }
  ];

  // AI Draft auto-generation function
  const triggerAIDraftGeneration = async (taskId: number, isAutoGeneration: boolean = true) => {
    const task = tasks.find(t => t.id === taskId);
    if (!task) return;

    const timestamp = new Date().toISOString().slice(0, 16).replace('T', ' ');
    const eventType = isAutoGeneration ? 'auto_generation_started' : 'manual_retry_started';
    const details = isAutoGeneration ? 'Auto-generation triggered on assignment' : 'Manual retry by system admin';

    // Update task status to generating
    setTasks(prevTasks => 
      prevTasks.map(t => 
        t.id === taskId 
          ? { 
              ...t, 
              aiDraftStatus: 'generating',
              aiDraftGenerationLog: [
                ...t.aiDraftGenerationLog,
                { timestamp, event: eventType, details }
              ]
            }
          : t
      )
    );

    // Simulate AI generation process
    setTimeout(() => {
      const success = Math.random() > 0.2; // 80% success rate
      const resultTimestamp = new Date().toISOString().slice(0, 16).replace('T', ' ');
      
      setTasks(prevTasks => 
        prevTasks.map(t => 
          t.id === taskId 
            ? { 
                ...t, 
                aiDraftStatus: success ? 'generated' : 'failed',
                aiDraftGenerationLog: [
                  ...t.aiDraftGenerationLog,
                  { 
                    timestamp: resultTimestamp, 
                    event: success ? 'generation_success' : 'generation_failed', 
                    details: success ? 'AI draft generated successfully' : 'AI service timeout error'
                  }
                ]
              }
            : t
        )
      );
    }, 3000);
  };

  // Filter suitable annotators based on assignment rules
  const getFilteredAnnotators = () => {
    if (!autoMode || selectedTasks.length === 0) {
      return annotators.filter(a => a.available);
    }

    // Get selected task information
    const selectedTasksData = tasks.filter(task => selectedTasks.includes(task.id));
    let filteredAnnotators = annotators.filter(a => a.available);

    // Apply workload strategy
    if (enabledStrategies.workload) {
      filteredAnnotators = filteredAnnotators.filter(a => a.workload < 15);
      filteredAnnotators.sort((a, b) => a.workload - b.workload);
    }

    // Apply skill matching strategy
    if (enabledStrategies.skill) {
      const requiredSkills = [...new Set(selectedTasksData.flatMap(task => task.requiredSkills || []))];
      if (requiredSkills.length > 0) {
        filteredAnnotators = filteredAnnotators.filter(a => 
          requiredSkills.some(skill => a.skills.includes(skill))
        );
        // Sort by skill matching degree
        filteredAnnotators.sort((a, b) => {
          const aMatches = a.skills.filter(skill => requiredSkills.includes(skill)).length;
          const bMatches = b.skills.filter(skill => requiredSkills.includes(skill)).length;
          return bMatches - aMatches;
        });
      }
    }

    // Apply timezone strategy
    if (enabledStrategies.timezone) {
      const currentHour = new Date().getHours();
      filteredAnnotators = filteredAnnotators.filter(a => {
        // Simplified timezone logic, actual implementation needs more complex calculations
        return a.timezone === 'UTC+8' && currentHour >= 9 && currentHour <= 18;
      });
    }

    // Apply performance strategy
    if (enabledStrategies.performance) {
      filteredAnnotators = filteredAnnotators.filter(a => a.performance >= 90);
      filteredAnnotators.sort((a, b) => b.performance - a.performance);
    }

    return filteredAnnotators;
  };

  const getFilteredQAReviewers = () => {
    if (!autoMode) {
      return qaReviewers.filter(qa => qa.available);
    }

    let filteredQA = qaReviewers.filter(qa => qa.available);

    // Apply workload strategy
    if (enabledStrategies.workload) {
      filteredQA = filteredQA.filter(qa => qa.workload < 10);
      filteredQA.sort((a, b) => a.workload - b.workload);
    }

    // Apply performance strategy
    if (enabledStrategies.performance) {
      filteredQA = filteredQA.filter(qa => qa.performance >= 90);
      filteredQA.sort((a, b) => b.performance - a.performance);
    }

    return filteredQA;
  };

  // Get recommendation reasons
  const getRecommendationReason = (person: any, isAnnotator: boolean = true) => {
    const reasons = [];
    
    if (isAnnotator && enabledStrategies.skill && selectedTasks.length > 0) {
      const selectedTasksData = tasks.filter(task => selectedTasks.includes(task.id));
      const requiredSkills = [...new Set(selectedTasksData.flatMap(task => task.requiredSkills || []))];
      const matchedSkills = person.skills.filter((skill: string) => requiredSkills.includes(skill));
      if (matchedSkills.length > 0) {
        reasons.push(`Skill Match: ${matchedSkills.join(', ')}`);
      }
    }

    if (enabledStrategies.workload) {
      const threshold = isAnnotator ? 15 : 10;
      if (person.workload < threshold / 2) {
        reasons.push('Light Workload');
      } else if (person.workload < threshold) {
        reasons.push('Moderate Workload');
      }
    }

    if (enabledStrategies.performance) {
      if (person.performance >= 95) {
        reasons.push('Excellent Performance');
      } else if (person.performance >= 90) {
        reasons.push('Good Performance');
      }
    }

    if (enabledStrategies.timezone && isAnnotator) {
      const currentHour = new Date().getHours();
      if (person.timezone === 'UTC+8' && currentHour >= 9 && currentHour <= 18) {
        reasons.push('Timezone Match');
      }
    }

    return reasons.length > 0 ? reasons.join(' • ') : 'Meets Basic Requirements';
  };

  // Get PDF group information
  const getPdfGroups = () => {
    const groups: { [key: string]: any[] } = {};
    tasks.forEach(task => {
      if (!groups[task.pdfGroup]) {
        groups[task.pdfGroup] = [];
      }
      groups[task.pdfGroup].push(task);
    });
    return groups;
  };

  const filteredTasks = tasks.filter(task => {
    const matchesSearch = task.fileName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         task.project.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         task.tableId.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesOrg = orgFilter === 'all' || task.organization === orgFilter;
    const matchesStatus = statusFilter === 'all' || task.status === statusFilter;
    return matchesSearch && matchesOrg && matchesStatus;
  });

  const handleTaskSelect = (taskId: number) => {
    setSelectedTasks(prev => 
      prev.includes(taskId) 
        ? prev.filter(id => id !== taskId)
        : [...prev, taskId]
    );
  };

  const handlePdfGroupSelect = (pdfGroup: string) => {
    const pdfTasks = tasks.filter(task => task.pdfGroup === pdfGroup).map(task => task.id);
    const allSelected = pdfTasks.every(id => selectedTasks.includes(id));
    
    if (allSelected) {
      setSelectedTasks(prev => prev.filter(id => !pdfTasks.includes(id)));
    } else {
      setSelectedTasks(prev => [...new Set([...prev, ...pdfTasks])]);
    }
  };

  const handleBulkAssign = () => {
    if (selectedTasks.length > 0) {
      // 跳转到Smart Assign页面，并传递选中的任务ID
      const taskIds = selectedTasks.join(',');
      router.push(`/console/system/smart-assign?tasks=${taskIds}`);
    }
  };

  const handleConfirmAssignment = async () => {
    if (!selectedAssignee) return;
    
    setIsAssigning(true);
    
    // Update task status to assigned
    setTasks(prevTasks => 
      prevTasks.map(task => 
        selectedTasks.includes(task.id) 
          ? { ...task, status: 'assigned', assignedTo: selectedAssignee.name }
          : task
      )
    );

    // Check for auto-generation settings and trigger AI draft generation
    const tasksToProcess = tasks.filter(task => selectedTasks.includes(task.id));
    
    for (const task of tasksToProcess) {
      const projectSetting = projectSettings[task.projectId as keyof typeof projectSettings];
      if (projectSetting?.autoGenerateDraft && task.aiDraftStatus === 'not_generated' && autoGenerateDraftOnAssign) {
        // Trigger auto-generation with a small delay to simulate real-world timing
        setTimeout(() => {
          triggerAIDraftGeneration(task.id, true);
        }, 500);
      }
    }

    setTimeout(() => {
      setIsAssigning(false);
      setShowAssignModal(false);
      setSelectedTasks([]);
      setSelectedAssignee(null);
    }, 2000);
  };

  const handleRetryAIGeneration = (taskId: number) => {
    triggerAIDraftGeneration(taskId, false);
  };

  const handleSaveRules = () => {
    setShowSaveModal(true);
    setTimeout(() => {
      setShowSaveModal(false);
    }, 2000);
  };

  const handleStrategyToggle = (strategyId: string) => {
    setEnabledStrategies(prev => ({
      ...prev,
      [strategyId]: !prev[`${strategyId}` as keyof typeof prev]
    }));
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed':
        return 'bg-green-100 text-green-800';
      case 'in_progress':
        return 'bg-blue-100 text-blue-800';
      case 'qa_pending':
        return 'bg-orange-100 text-orange-800';
      case 'pending':
        return 'bg-gray-100 text-gray-800';
      case 'assigned':
        return 'bg-purple-100 text-purple-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'completed':
        return 'Completed';
      case 'in_progress':
        return 'In Progress';
      case 'qa_pending':
        return 'QA Pending';
      case 'pending':
        return 'Pending';
      case 'assigned':
        return 'Assigned';
      default:
        return 'Unknown';
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high':
        return 'text-red-600';
      case 'medium':
        return 'text-yellow-600';
      case 'low':
        return 'text-green-600';
      default:
        return 'text-gray-600';
    }
  };

  const getComplexityColor = (complexity: string) => {
    switch (complexity) {
      case 'high': return 'bg-red-100 text-red-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'low': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getComplexityLabel = (complexity: string) => {
    switch (complexity) {
      case 'high': return 'Complex';
      case 'medium': return 'Medium';
      case 'low': return 'Simple';
      default: return complexity;
    }
  };

  const getAiDraftStatusColor = (status: string) => {
    switch (status) {
      case 'generated': return 'bg-green-100 text-green-800';
      case 'generating': return 'bg-blue-100 text-blue-800';
      case 'failed': return 'bg-red-100 text-red-800';
      case 'not_generated': return 'bg-gray-100 text-gray-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getAiDraftStatusLabel = (status: string) => {
    switch (status) {
      case 'generated': return 'Generated';
      case 'generating': return 'Generating';
      case 'failed': return 'Failed';
      case 'not_generated': return 'Not Generated';
      default: return status;
    }
  };

  const tabs = [
    { id: 'tasks', label: 'Task Assignment', icon: 'ri-task-line' },
    { id: 'rules', label: 'Assignment Rules', icon: 'ri-settings-3-line' },
    { id: 'annotators', label: 'Annotator Management', icon: 'ri-team-line' }
  ];

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-xl font-semibold text-gray-900">Task Assignment Management</h2>
          <p className="text-sm text-gray-600 mt-1">Cross-organization task assignment, rule configuration, and annotator management (table as minimum unit)</p>
        </div>
        <div className="flex items-center space-x-3">
          {activeTab === 'rules' && (
            <button
              onClick={handleSaveRules}
              className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 flex items-center space-x-2 whitespace-nowrap cursor-pointer"
            >
              <i className="ri-save-line w-4 h-4 flex items-center justify-center"></i>
              <span>Save Configuration</span>
            </button>
          )}
          {activeTab === 'tasks' && (
            <div className="flex items-center space-x-3">
              <div className="flex items-center space-x-2 bg-gray-100 rounded-lg p-1">
                <button
                  onClick={() => setAssignmentMode('table')}
                  className={`px-3 py-1 text-sm rounded-md whitespace-nowrap cursor-pointer ${
                    assignmentMode === 'table' 
                      ? 'bg-white text-blue-600 shadow-sm' 
                      : 'text-gray-600 hover:text-gray-800'
                  }`}
                >
                  Assign by Table
                </button>
                <button
                  onClick={() => setAssignmentMode('pdf')}
                  className={`px-3 py-1 text-sm rounded-md whitespace-nowrap cursor-pointer ${
                    assignmentMode === 'pdf' 
                      ? 'bg-white text-blue-600 shadow-sm' 
                      : 'text-gray-600 hover:text-gray-800'
                  }`}
                >
                  Assign by PDF
                </button>
              </div>
              <button
                onClick={handleBulkAssign}
                disabled={selectedTasks.length === 0}
                className={`px-4 py-2 rounded-lg flex items-center space-x-2 whitespace-nowrap cursor-pointer ${
                  selectedTasks.length > 0
                    ? 'bg-blue-600 text-white hover:bg-blue-700'
                    : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                }`}
              >
                <i className="ri-user-add-line w-4 h-4 flex items-center justify-center"></i>
                <span>Smart Assign ({selectedTasks.length})</span>
              </button>
            </div>
          )}
        </div>
      </div>

      {/* Strategy Status Bar */}
      {activeTab === 'tasks' && autoMode && (
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <i className="ri-magic-line w-5 h-5 flex items-center justify-center text-blue-600"></i>
              <div>
                <div className="font-medium text-blue-900">Smart Assignment Enabled</div>
                <div className="text-sm text-blue-700">
                  Current Strategies: {Object.entries(enabledStrategies)
                    .filter(([_, enabled]) => enabled)
                    .map(([key, _]) => {
                      switch(key) {
                        case 'workload': return 'Workload';
                        case 'skill': return 'Skill Match';
                        case 'timezone': return 'Timezone';
                        case 'performance': return 'Performance';
                        default: return key;
                      }
                    })
                    .join(' • ')}
                </div>
              </div>
            </div>
            <button
              onClick={() => setActiveTab('rules')}
              className="text-blue-600 hover:text-blue-700 text-sm cursor-pointer"
            >
              Adjust Strategies
            </button>
          </div>
        </div>
      )}

      {/* Tabs */}
      <div className="border-b border-gray-200">
        <nav className="flex space-x-8">
          {tabs.map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`flex items-center space-x-2 py-4 px-1 border-b-2 font-medium text-sm whitespace-nowrap cursor-pointer ${
                activeTab === tab.id
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              <i className={`${tab.icon} w-4 h-4 flex items-center justify-center`}></i>
              <span>{tab.label}</span>
            </button>
          ))}
        </nav>
      </div>

      {/* Tab Content */}
      {activeTab === 'tasks' && (
        <div className="space-y-6">
          {/* Filters */}
          <div className="flex items-center space-x-4">
            <div className="flex-1 max-w-md">
              <div className="relative">
                <i className="ri-search-line absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 flex items-center justify-center text-gray-400"></i>
                <input
                  type="text"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  placeholder="Search tasks, projects, or table ID..."
                  className="w-full pl-9 pr-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
              </div>
            </div>
            <select
              value={orgFilter}
              onChange={(e) => setOrgFilter(e.target.value)}
              className="border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="all">All Organizations</option>
              <option value="TechCorp Inc.">TechCorp Inc.</option>
              <option value="StartupXYZ">StartupXYZ</option>
              <option value="LegalFirm LLC">LegalFirm LLC</option>
            </select>
            <select
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
              className="border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="all">All Status</option>
              <option value="pending">Pending</option>
              <option value="assigned">Assigned</option>
              <option value="in_progress">In Progress</option>
              <option value="qa_pending">QA Pending</option>
              <option value="completed">Completed</option>
            </select>
          </div>

          {/* Assignment Mode Info */}
          {assignmentMode === 'pdf' && (
            <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
              <div className="flex items-start space-x-3">
                <i className="ri-information-line w-5 h-5 flex items-center justify-center text-yellow-600 mt-0.5"></i>
                <div className="text-sm">
                  <div className="font-medium text-yellow-900 mb-1">PDF Batch Assignment Mode</div>
                  <div className="text-yellow-700">
                    In this mode, you can select entire PDF files for one-click assignment. The system will still create and track tasks by table units in the background, but assignment operations are more convenient.
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Tasks Table */}
          <div className="bg-white rounded-lg shadow-sm overflow-hidden">
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-50 border-b border-gray-200">
                  <tr>
                    <th className="text-left py-3 px-4 font-medium text-gray-900">
                      <input
                        type="checkbox"
                        checked={selectedTasks.length === filteredTasks.length && filteredTasks.length > 0}
                        onChange={(e) => {
                          if (e.target.checked) {
                            setSelectedTasks(filteredTasks.map(task => task.id));
                          } else {
                            setSelectedTasks([]);
                          }
                        }}
                        className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                      />
                    </th>
                    <th className="text-left py-3 px-4 font-medium text-gray-900">Table Info</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-900">File/Project</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-900">Table Structure</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-900">Complexity/Priority</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-900">AI Draft</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-900">Status</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-900">Assigned To</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-900">Due Date</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-900">Action</th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-gray-200">
                  {assignmentMode === 'pdf' && (
                    <>
                      {Object.entries(getPdfGroups()).map(([pdfGroup, pdfTasks]) => {
                        const allSelected = pdfTasks.every(task => selectedTasks.includes(task.id));
                        const someSelected = pdfTasks.some(task => selectedTasks.includes(task.id));
                        return (
                          <tr key={`pdf-${pdfGroup}`} className="bg-blue-50 hover:bg-blue-100">
                            <td className="py-3 px-4">
                              <input
                                type="checkbox"
                                checked={allSelected}
                                ref={(el) => {
                                  if (el) el.indeterminate = someSelected && !allSelected;
                                }}
                                onChange={() => handlePdfGroupSelect(pdfGroup)}
                                className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                              />
                            </td>
                            <td colSpan={9} className="py-3 px-4">
                              <div className="flex items-center space-x-3">
                                <i className="ri-file-pdf-line w-5 h-5 flex items-center justify-center text-red-500"></i>
                                <div>
                                  <div className="font-medium text-blue-900">{pdfGroup}</div>
                                  <div className="text-sm text-blue-700">
                                    {pdfTasks.length} table tasks • 
                                    Project: {pdfTasks[0].project} • 
                                    Organization: {pdfTasks[0].organization}
                                  </div>
                                </div>
                                <div className="ml-auto flex items-center space-x-2">
                                  <span className="text-xs text-blue-600 bg-blue-100 px-2 py-1 rounded-full">
                                    PDF Batch
                                  </span>
                                </div>
                              </div>
                            </td>
                          </tr>
                        );
                      })}
                    </>
                  )}
                  {filteredTasks.map((task) => (
                    <tr key={task.id} className={`hover:bg-gray-50 ${assignmentMode === 'pdf' ? 'pl-8' : ''}`}>
                      <td className="py-4 px-4">
                        <input
                          type="checkbox"
                          checked={selectedTasks.includes(task.id)}
                          onChange={() => handleTaskSelect(task.id)}
                          className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                        />
                      </td>
                      <td className="py-4 px-4">
                        <div>
                          <div className="font-medium text-gray-900 text-sm flex items-center space-x-2">
                            <span className="font-mono text-blue-600">{task.tableId}</span>
                            {task.hasFootnotes && (
                              <span className="text-xs bg-purple-100 text-purple-800 px-1 py-0.5 rounded">Footnotes</span>
                            )}
                          </div>
                          <div className="text-xs text-gray-500">Page {task.pageNumber}</div>
                        </div>
                      </td>
                      <td className="py-4 px-4">
                        <div>
                          <div className="text-sm text-gray-900">{task.fileName}</div>
                          <div className="text-xs text-gray-500">{task.project}</div>
                          <div className="text-xs text-gray-400">{task.organization}</div>
                          <div className="text-xs text-blue-600 mt-1">
                            Auto-Gen: {projectSettings[task.projectId as keyof typeof projectSettings]?.autoGenerateDraft ? 'ON' : 'OFF'}
                          </div>
                        </div>
                      </td>
                      <td className="py-4 px-4">
                        <div className="text-sm">
                          <div className="text-gray-900">{task.tableRows}×{task.tableCols}</div>
                          <div className="text-xs text-gray-500">
                            bbox: [{task.tableBbox.slice(0, 2).join(', ')}...]
                          </div>
                        </div>
                      </td>
                      <td className="py-4 px-4">
                        <div className="flex flex-col space-y-1">
                          <span className={`px-2 py-1 text-xs rounded-full ${getComplexityColor(task.complexity)}`}>
                            {getComplexityLabel(task.complexity)}
                          </span>
                          <i className={`ri-flag-line w-3 h-3 flex items-center justify-center ${getPriorityColor(task.priority)}`}></i>
                        </div>
                      </td>
                      <td className="py-4 px-4">
                        <div className="flex flex-col space-y-1">
                          <span className={`px-2 py-1 text-xs rounded-full ${getAiDraftStatusColor(task.aiDraftStatus)}`}>
                            {getAiDraftStatusLabel(task.aiDraftStatus)}
                          </span>
                          {task.aiDraftStatus === 'failed' && (
                            <button
                              onClick={() => handleRetryAIGeneration(task.id)}
                              className="text-xs text-red-600 hover:text-red-700 cursor-pointer"
                            >
                              Retry
                            </button>
                          )}
                          {task.aiDraftStatus === 'generating' && (
                            <div className="flex items-center space-x-1">
                              <i className="ri-loader-4-line w-3 h-3 flex items-center justify-center text-blue-600 animate-spin"></i>
                              <span className="text-xs text-blue-600">Processing</span>
                            </div>
                          )}
                        </div>
                      </td>
                      <td className="py-4 px-4">
                        <span className={`px-2 py-1 text-xs rounded-full ${getStatusColor(task.status)}`}>
                          {getStatusText(task.status)}
                        </span>
                      </td>
                      <td className="py-4 px-4">
                        <span className="text-sm text-gray-600">
                          {task.assignedTo || 'Unassigned'}
                        </span>
                      </td>
                      <td className="py-4 px-4">
                        <span className="text-sm text-gray-600">{task.dueDate}</span>
                      </td>
                      <td className="py-4 px-4">
                        <div className="flex flex-col space-y-1">
                          <button className="text-blue-600 hover:text-blue-700 text-sm cursor-pointer">
                            View Details
                          </button>
                          {task.aiDraftGenerationLog.length > 0 && (
                            <button className="text-gray-600 hover:text-gray-700 text-xs cursor-pointer">
                              View Log
                            </button>
                          )}
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>

          {filteredTasks.length === 0 && (
            <div className="bg-white rounded-lg shadow-sm p-8 text-center">
              <i className="ri-task-line w-12 h-12 flex items-center justify-center text-gray-300 mx-auto mb-4"></i>
              <h3 className="text-lg font-medium text-gray-900 mb-2">No Matching Tasks</h3>
              <p className="text-gray-600">Try adjusting filter conditions to view more tasks</p>
            </div>
          )}
        </div>
      )}

      {/* Rules Tab */}
      {activeTab === 'rules' && (
        <div className="space-y-6">
          {/* Mode Toggle */}
          <div className="bg-white rounded-lg shadow-sm p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Assignment Mode</h3>
            <div className="flex items-center space-x-6">
              <label className="flex items-center space-x-3 cursor-pointer">
                <input
                  type="radio"
                  checked={autoMode}
                  onChange={() => setAutoMode(true)}
                  className="w-4 h-4 text-blue-600 border-gray-300 focus:ring-blue-500"
                />
                <div>
                  <div className="font-medium text-gray-900">Automatic Assignment</div>
                  <div className="text-sm text-gray-500">Automatically assign tasks based on preset rules</div>
                </div>
              </label>
              <label className="flex items-center space-x-3 cursor-pointer">
                <input
                  type="radio"
                  checked={!autoMode}
                  onChange={() => setAutoMode(false)}
                  className="w-4 h-4 text-blue-600 border-gray-300 focus:ring-blue-500"
                />
                <div>
                  <div className="font-medium text-gray-900">Manual Assignment</div>
                  <div className="text-sm text-gray-500">Manually assign tasks by system administrators</div>
                </div>
              </label>
            </div>
          </div>

          {autoMode && (
            <>
              {/* Allocation Strategies */}
              <div className="bg-white rounded-lg shadow-sm p-6">
                <h3 className="text-lg font-semibold text-gray-900 mb-4">Assignment Strategies</h3>
                <div className="space-y-4">
                  {allocationStrategies.map((strategy) => (
                    <div key={strategy.id} className="flex items-center justify-between p-4 border border-gray-200 rounded-lg">
                      <div className="flex items-center space-x-3">
                        <input
                          type="checkbox"
                          checked={enabledStrategies[strategy.id as keyof typeof enabledStrategies]}
                          onChange={() => handleStrategyToggle(strategy.id)}
                          className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                        />
                        <div>
                          <div className="font-medium text-gray-900">{strategy.name}</div>
                          <div className="text-sm text-gray-500">{strategy.description}</div>
                        </div>
                      </div>
                      <button className="text-blue-600 hover:text-blue-700 text-sm cursor-pointer">
                        Configure
                      </button>
                    </div>
                  ))}
                </div>
              </div>

              {/* Current Rules */}
              <div className="bg-white rounded-lg shadow-sm">
                <div className="p-6 border-b border-gray-200">
                  <div className="flex items-center justify-between">
                    <h3 className="text-lg font-semibold text-gray-900">Current Rules</h3>
                    <button className="text-blue-600 hover:text-blue-700 text-sm cursor-pointer">
                      Add Rule
                    </button>
                  </div>
                </div>
                <div className="divide-y divide-gray-200">
                  {currentRules.map((rule) => (
                    <div key={rule.id} className="p-4 hover:bg-gray-50">
                      <div className="flex items-center justify-between">
                        <div className="flex-1">
                          <div className="flex items-center space-x-3 mb-2">
                            <div className="font-medium text-gray-900">{rule.name}</div>
                            <span className={`px-2 py-1 text-xs rounded-full ${
                              rule.status === 'active' 
                                ? 'bg-green-100 text-green-800' 
                                : 'bg-gray-100 text-gray-800'
                            }`}>
                              {rule.status === 'active' ? 'Enabled' : 'Disabled'}
                            </span>
                          </div>
                          <div className="text-sm text-gray-600">
                            <span className="font-medium">Condition:</span> {rule.condition}
                          </div>
                          <div className="text-sm text-gray-600">
                            <span className="font-medium">Action:</span> {rule.action}
                          </div>
                        </div>
                        <div className="flex items-center space-x-2">
                          <button className="text-blue-600 hover:text-blue-700 text-sm cursor-pointer">
                            Edit
                          </button>
                          <button className="text-gray-600 hover:text-gray-700 text-sm cursor-pointer">
                            {rule.status === 'active' ? 'Disable' : 'Enable'}
                          </button>
                          <button className="text-red-600 hover:text-red-700 text-sm cursor-pointer">
                            Delete
                          </button>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </>
          )}
        </div>
      )}

      {/* Annotators Tab */}
      {activeTab === 'annotators' && (
        <div className="space-y-6">
          {/* Annotator Skills Overview */}
          <div className="bg-white rounded-lg shadow-sm">
            <div className="p-6 border-b border-gray-200">
              <h3 className="text-lg font-semibold text-gray-900">Annotator Skills Overview</h3>
              <p className="text-sm text-gray-600 mt-1">Annotator skills and status for smart assignment</p>
            </div>
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-50 border-b border-gray-200">
                  <tr>
                    <th className="text-left py-3 px-4 font-medium text-gray-900">Annotator</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-900">Organization</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-900">Skill Tags</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-900">Current Workload</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-900">Performance</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-900">Action</th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-gray-200">
                  {annotators.map((annotator, index) => (
                    <tr key={index} className="hover:bg-gray-50">
                      <td className="py-4 px-4">
                        <div className="flex items-center space-x-3">
                          <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                            <span className="text-sm font-medium text-blue-600">
                              {annotator.name.split(' ').map(n => n[0]).join('')}
                            </span>
                          </div>
                          <span className="font-medium text-gray-900">{annotator.name}</span>
                        </div>
                      </td>
                      <td className="py-4 px-4">
                        <span className="text-sm text-gray-600">{annotator.org}</span>
                      </td>
                      <td className="py-4 px-4">
                        <div className="flex flex-wrap gap-1">
                          {annotator.skills.map((skill, skillIndex) => (
                            <span key={skillIndex} className="px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded-full">
                              {skill}
                            </span>
                          ))}
                        </div>
                      </td>
                      <td className="py-4 px-4">
                        <div className="flex items-center space-x-2">
                          <span className="text-sm text-gray-900">{annotator.workload} tasks</span>
                          <div className={`w-2 h-2 rounded-full ${
                            annotator.workload > 12 ? 'bg-red-500' : 
                            annotator.workload > 8 ? 'bg-yellow-500' : 'bg-green-500'
                          }`}></div>
                        </div>
                      </td>
                      <td className="py-4 px-4">
                        <div className="flex items-center space-x-1">
                          <i className={`ri-star-fill w-3 h-3 flex items-center justify-center ${
                            annotator.performance >= 95 ? 'text-green-600' : 
                            annotator.performance >= 90 ? 'text-yellow-600' : 'text-red-600'
                          }`}></i>
                          <span className="text-sm font-medium text-gray-900">{annotator.performance}%</span>
                        </div>
                      </td>
                      <td className="py-4 px-4">
                        <button className="text-blue-600 hover:text-blue-700 text-sm cursor-pointer">
                          Edit Skills
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>

          {/* QA Reviewers Overview */}
          <div className="bg-white rounded-lg shadow-sm">
            <div className="p-6 border-b border-gray-200">
              <h3 className="text-lg font-semibold text-gray-900">QA Reviewers Overview</h3>
              <p className="text-sm text-gray-600 mt-1">QA reviewer work status and performance</p>
            </div>
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead className="bg-gray-50 border-b border-gray-200">
                  <tr>
                    <th className="text-left py-3 px-4 font-medium text-gray-900">QA Reviewer</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-900">Organization</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-900">Current Workload</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-900">Review Quality</th>
                    <th className="text-left py-3 px-4 font-medium text-gray-900">Action</th>
                  </tr>
                </thead>
                <tbody className="divide-y divide-gray-200">
                  {qaReviewers.map((reviewer, index) => (
                    <tr key={index} className="hover:bg-gray-50">
                      <td className="py-4 px-4">
                        <div className="flex items-center space-x-3">
                          <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
                            <span className="text-sm font-medium text-green-600">
                              {reviewer.name.split(' ').map(n => n[0]).join('')}
                            </span>
                          </div>
                          <span className="font-medium text-gray-900">{reviewer.name}</span>
                        </div>
                      </td>
                      <td className="py-4 px-4">
                        <span className="text-sm text-gray-600">{reviewer.org}</span>
                      </td>
                      <td className="py-4 px-4">
                        <div className="flex items-center space-x-2">
                          <span className="text-sm text-gray-900">{reviewer.workload} tasks</span>
                          <div className={`w-2 h-2 rounded-full ${
                            reviewer.workload > 8 ? 'bg-red-500' : 
                            reviewer.workload > 5 ? 'bg-yellow-500' : 'bg-green-500'
                          }`}></div>
                        </div>
                      </td>
                      <td className="py-4 px-4">
                        <div className="flex items-center space-x-1">
                          <i className={`ri-star-fill w-3 h-3 flex items-center justify-center ${
                            reviewer.performance >= 95 ? 'text-green-600' : 
                            reviewer.performance >= 90 ? 'text-yellow-600' : 'text-red-600'
                          }`}></i>
                          <span className="text-sm font-medium text-gray-900">{reviewer.performance}%</span>
                        </div>
                      </td>
                      <td className="py-4 px-4">
                        <button className="text-blue-600 hover:text-blue-700 text-sm cursor-pointer">
                          View Details
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      )}

      {/* Assignment Modal */}
      {showAssignModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-[600px] max-w-90vw max-h-80vh overflow-y-auto">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-900">Smart Task Assignment</h3>
              <div className="flex items-center space-x-2 text-sm text-gray-600">
                <i className="ri-magic-line w-4 h-4 flex items-center justify-center"></i>
                <span>Filtered by assignment rules</span>
              </div>
            </div>
            
            {/* AI Draft Auto-Generation Info */}
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-3 mb-4">
              <div className="flex items-start space-x-2">
                <i className="ri-magic-line w-4 h-4 flex items-center justify-center text-blue-600 mt-0.5"></i>
                <div className="text-sm text-blue-700">
                  <div className="font-medium mb-1">AI Draft Auto-Generation</div>
                  <div className="text-xs">
                    {(() => {
                      const selectedTasksData = tasks.filter(task => selectedTasks.includes(task.id));
                      const autoGenTasks = selectedTasksData.filter(task => 
                        projectSettings[task.projectId as keyof typeof projectSettings]?.autoGenerateDraft
                      );
                      return autoGenTasks.length > 0 
                        ? `${autoGenTasks.length} of ${selectedTasksData.length} tasks will auto-generate AI drafts upon assignment`
                        : 'No tasks have auto-generation enabled. Annotators can manually generate drafts.';
                    })()}
                  </div>
                </div>
              </div>
            </div>

            {/* 新增：AI草稿自动生成配置开关 */}
            <div className="border border-blue-200 rounded-lg p-4 bg-blue-50 mb-4">
              <div className="flex items-start space-x-3">
                <i className="ri-magic-line w-5 h-5 flex items-center justify-center text-blue-600 mt-0.5"></i>
                <div className="flex-1">
                  <div className="flex items-center justify-between mb-2">
                    <label className="text-sm font-medium text-blue-900">
                      Auto-Generate Draft on Assign
                    </label>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={autoGenerateDraftOnAssign}
                        onChange={(e) => setAutoGenerateDraftOnAssign(e.target.checked)}
                        className="sr-only peer"
                      />
                      <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                    </label>
                  </div>
                  <div className="text-xs text-blue-700">
                    {autoGenerateDraftOnAssign ? (
                      <>
                        <div className="font-medium mb-1">✓ 自动生成已启用</div>
                        <div>分配任务时将自动触发AI草稿生成，提高标注效率</div>
                      </>
                    ) : (
                      <>
                        <div className="font-medium mb-1">✗ 手动生成模式</div>
                        <div>标注员需要在工作台手动点击"Generate Draft"来生成AI草稿</div>
                      </>
                    )}
                  </div>
                </div>
              </div>
            </div>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Assignment Type
                </label>
                <div className="flex space-x-4">
                  <label className="flex items-center space-x-2 cursor-pointer">
                    <input
                      type="radio"
                      checked={assignmentType === 'annotator'}
                      onChange={() => setAssignmentType('annotator')}
                      className="w-4 h-4 text-blue-600 border-gray-300 focus:ring-blue-500"
                    />
                    <span className="text-sm text-gray-900">Annotator</span>
                  </label>
                  <label className="flex items-center space-x-2 cursor-pointer">
                    <input
                      type="radio"
                      checked={assignmentType === 'qa'}
                      onChange={() => setAssignmentType('qa')}
                      className="w-4 h-4 text-blue-600 border-gray-300 focus:ring-blue-500"
                    />
                    <span className="text-sm text-gray-900">QA Reviewer</span>
                  </label>
                </div>
              </div>

              <div>
                <div className="flex items-center justify-between mb-2">
                  <label className="block text-sm font-medium text-gray-700">
                    Recommended {assignmentType === 'annotator' ? 'Annotators' : 'QA Reviewers'}
                  </label>
                  <span className="text-xs text-gray-500">
                    {assignmentType === 'annotator' ? getFilteredAnnotators().length : getFilteredQAReviewers().length} qualified
                  </span>
                </div>
                <div className="max-h-64 overflow-y-auto border border-gray-300 rounded-lg">
                  {(assignmentType === 'annotator' ? getFilteredAnnotators() : getFilteredQAReviewers()).map((person) => (
                    <label key={person.id} className="flex items-start space-x-3 p-4 hover:bg-gray-50 cursor-pointer border-b border-gray-100 last:border-b-0">
                      <input
                        type="radio"
                        name="assignee"
                        checked={selectedAssignee?.id === person.id}
                        onChange={() => setSelectedAssignee(person)}
                        className="w-4 h-4 text-blue-600 border-gray-300 focus:ring-blue-500 mt-1"
                      />
                      <div className="flex-1 min-w-0">
                        <div className="flex items-center justify-between mb-1">
                          <div className="flex items-center space-x-2">
                            <div className="font-medium text-gray-900">{person.name}</div>
                            <div className={`w-2 h-2 rounded-full ${
                              person.workload > (assignmentType === 'annotator' ? 12 : 8) ? 'bg-red-500' : 
                              person.workload > (assignmentType === 'annotator' ? 8 : 5) ? 'bg-yellow-500' : 'bg-green-500'
                            }`}></div>
                          </div>
                          <div className="text-right">
                            <div className="text-sm text-gray-600">{person.workload} tasks</div>
                            <div className="text-sm text-green-600">{person.performance}% quality</div>
                          </div>
                        </div>
                        <div className="text-sm text-gray-500 mb-2">{person.org}</div>
                        {assignmentType === 'annotator' && 'skills' in person && (
                          <div className="flex flex-wrap gap-1 mb-2">
                            {person.skills.map((skill, index) => (
                              <span key={index} className="px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded-full">
                                {skill}
                              </span>
                            ))}
                          </div>
                        )}
                        <div className="text-xs text-blue-600 bg-blue-50 px-2 py-1 rounded">
                          Reason: {getRecommendationReason(person, assignmentType === 'annotator')}
                        </div>
                      </div>
                    </label>
                  ))}
                  {(assignmentType === 'annotator' ? getFilteredAnnotators() : getFilteredQAReviewers()).length === 0 && (
                    <div className="p-4 text-center text-gray-500">
                      <i className="ri-user-unfollow-line w-8 h-8 flex items-center justify-center mx-auto mb-2 text-gray-300"></i>
                      <div className="text-sm">No qualified {assignmentType === 'annotator' ? 'annotators' : 'QA reviewers'}</div>
                      <div className="text-xs text-gray-400 mt-1">Please adjust assignment rules or select manually</div>
                    </div>
                  )}
                </div>
              </div>

              {autoMode && (
                <div className="bg-green-50 border border-green-200 rounded-lg p-3">
                  <div className="flex items-start space-x-2">
                    <i className="ri-lightbulb-line w-4 h-4 flex items-center justify-center text-green-600 mt-0.5"></i>
                    <div className="text-sm text-green-700">
                      <div className="font-medium">Smart Recommendation Explanation</div>
                      <div className="text-xs mt-1">
                        The system has automatically filtered the most suitable personnel based on current assignment rules. Recommendations are based on workload, skill matching, historical performance, and other factors.
                      </div>
                    </div>
                  </div>
                </div>
              )}
            </div>
            
            <div className="flex items-center justify-end space-x-3 mt-6">
              <button
                onClick={() => {
                  setShowAssignModal(false);
                  setSelectedAssignee(null);
                }}
                className="px-4 py-2 text-sm text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg whitespace-nowrap cursor-pointer"
              >
                Cancel
              </button>
              <button
                onClick={handleConfirmAssignment}
                disabled={!selectedAssignee || isAssigning}
                className="px-4 py-2 text-sm text-white bg-blue-600 hover:bg-blue-700 rounded-lg whitespace-nowrap cursor-pointer disabled:opacity-50 flex items-center space-x-2"
              >
                {isAssigning ? (
                  <>
                    <i className="ri-loader-4-line w-4 h-4 flex items-center justify-center animate-spin"></i>
                    <span>Assigning...</span>
                  </>
                ) : (
                  <span>Confirm Assignment</span>
                )}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Save Confirmation Modal */}
      {showSaveModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-80">
            <div className="flex items-center space-x-3 mb-4">
              <div className="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
                <i className="ri-check-line w-4 h-4 flex items-center justify-center text-green-600"></i>
              </div>
              <h3 className="text-lg font-semibold text-gray-900">Configuration Saved</h3>
            </div>
            <p className="text-sm text-gray-600">Assignment rule configuration has been successfully saved and applied</p>
          </div>
        </div>
      )}
    </div>
  );
}
